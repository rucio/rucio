#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN) since 2012
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import sys

from rucio.client.bin.rucio_admin import main
from rucio.common.utils import setup_logger


def make_warning() -> None:
    account_commands = {
        "list": "list account",
        "list-attributes": "list account attribute",
        "add-attribute": "add account attribute",
        "add": "add account",
        "delete": "remove account",
        "info": "--view info list account",
        "list-identities": "list account identities",
        "set-limits": "add account limits",
        "get-limits": 'list account limits',
        "delete-limits": "remove account limits",
        "ban": "set account ban",
        "unban": "unset account ban",
        "update": "set account"
    }

    identity_commands = {
        "add": "add account identities",
        "delete": "remove account identities"
    }

    rse_commands = {
        "list": "list rse",
        "add": "add rse",
        "update": "set rse",
        "info": "--view info list rse",
        "set-attribute": "add rse attribute",
        "delete-attribute": "remove rse attribute",
        "add-distance": "add rse distance",
        "update-distance": "set rse distance",
        "delete-distance": "remove rse distance",
        "get-distance": "list rse distance",
        "get-attribute": "list rse attribute",
        "add-protocol": "add rse protocol",
        "delete-protocol": "remove rse protocol",
        "delete": "remove rse",
        "add-qos-policy": "add rse qos-policy",
        "delete-qos-policy": "remove rse qos-policy",
        "list-qos-policies": "list rse qos-policy",
        "set-limit": "add rse limit",
        "delete-limit": "remove rse limit"
    }

    scope_commands = {
        "add": "add scope",
        "list": "list scope"
    }

    config_commands = {
        "get": "list config",
        "set": "set config",
        "delete": "unset config"
    }

    subscription_commands = {
        "list": "list subscription",
        'add': "add subscription",
        "update": "set subscription",
    }

    replica_commands = {
        "quarantine": "set replica state --quarantine",
        "declare-bad": "set replica state --bad",
        "declare-temporary-unavailable": "set replica state --temporary-unavailable",
        "list-pfns": "list replica pfn",
        "set-tombstone": "add replica tombstone"
    }

    base_commands = {
        "data": {},
        "account": account_commands,
        "identity": identity_commands,
        "rse": rse_commands,
        "scope": scope_commands,
        "config": config_commands,
        "subscription": subscription_commands,
        "replicas": replica_commands
    }

    arguments = [arg for arg in sys.argv if (arg[0] != '-') or (arg == '-h')]
    try:
        group_argument = [arg for arg in arguments if arg in base_commands.keys()][0]
        new_command_group = base_commands[group_argument]

        argument = [arg for arg in arguments if arg in new_command_group.keys()][0]
        new_command = new_command_group[argument]

        new_command = f"`rucio {new_command_group[argument]}`"
    except (KeyError, IndexError):
        new_command = "found by using rucio -h"

    # As a print statement so it cannot be disabled
    print(f"""\n
        WARNING: This client command will be deprecated. Please use the updated version of this command - {new_command}.\n
        A description of changes to the client structure can be found here: https://rucio.cern.ch/documentation/user/using_the_client
    """)


if __name__ == '__main__':
    logger = setup_logger(module_name=__name__, logger_name="user")
    make_warning()
    main(logger)
