#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright 2016-2021 CERN
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Authors:
# - Vincent Garonne <vincent.garonne@cern.ch>, 2016-2018
# - Mario Lassnig <mario.lassnig@cern.ch>, 2019
# - Joaquín Bogado <jbogado@linti.unlp.edu.ar>, 2019
# - Patrick Austin <patrick.austin@stfc.ac.uk>, 2020
# - Benedikt Ziemons <benedikt.ziemons@cern.ch>, 2020
# - David Población Criado <david.poblacion.criado@cern.ch>, 2021

"""
Reaper is a daemon to manage sub-file deletion
"""

import argparse
import signal

from rucio.daemons.reaper.light_reaper import run, stop


def get_parser():
    """
    Returns the argparse parser.
    """
    parser = argparse.ArgumentParser(description="The light-reaper is responsible of deletion of temporary files")
    parser.add_argument("--run-once", action="store_true", default=False, help='One iteration only')
    parser.add_argument("--total-workers", action="store", default=1, type=int, help='Total number of workers per process')
    parser.add_argument("--chunk-size", action="store", default=10, type=int, help='Chunk size')
    parser.add_argument("--scheme", action="store", default=None, type=str, help='Force the reaper to use a particular protocol, e.g., mock.')
    parser.add_argument('--rses', nargs='+', type=str, help='List of RSEs')
    parser.add_argument('--exclude-rses', action="store", default=None, type=str, help='RSEs expression to exclude RSEs')
    parser.add_argument('--include-rses', action="store", default=None, type=str, help='RSEs expression to include RSEs')
    parser.add_argument('--vos', nargs='+', type=str, help='Optional list of VOs to consider. Only used in multi-VO mode.')
    parser.add_argument('--sleep-time', action="store", default=60, type=int, help='Concurrency control: thread sleep time after each chunk of work')
    return parser


if __name__ == '__main__':
    signal.signal(signal.SIGTERM, stop)
    parser = get_parser()
    args = parser.parse_args()
    try:
        run(total_workers=args.total_workers, chunk_size=args.chunk_size,
            once=args.run_once, scheme=args.scheme, rses=args.rses,
            exclude_rses=args.exclude_rses, include_rses=args.include_rses, vos=args.vos, sleep_time=args.sleep_time)
    except KeyboardInterrupt:
        stop()
