#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright 2015-2021 CERN
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Authors:
# - Wen Guan <wen.guan@cern.ch>, 2015
# - Vincent Garonne <vincent.garonne@cern.ch>, 2015-2018
# - Cedric Serfon <cedric.serfon@cern.ch>, 2018-2019
# - Hannes Hansen <hannes.jakob.hansen@cern.ch>, 2018
# - Joaqu√≠n Bogado <jbogado@linti.unlp.edu.ar>, 2019
# - Andrew Lister <andrew.lister@stfc.ac.uk>, 2019
# - Patrick Austin <patrick.austin@stfc.ac.uk>, 2020
# - Benedikt Ziemons <benedikt.ziemons@cern.ch>, 2020
# - Radu Carpa <radu.carpa@cern.ch>, 2021

"""
Conveyor is a daemon to manage file transfers.
"""

import argparse
import signal

from rucio.daemons.conveyor.stager import run, stop


def get_parser():
    """
    Returns the argparse parser.
    """
    parser = argparse.ArgumentParser(description="The conveyor-stager is responsible for issuing staging requests to the tape system.")
    parser.add_argument("--run-once", action="store_true", default=False,
                        help='One iteration only')
    parser.add_argument("--total-threads", action="store", default=1, type=int,
                        help='Concurrency control: total number of threads per process')
    parser.add_argument("--bulk", action="store", default=100, type=int,
                        help='Bulk control: number of requests')
    parser.add_argument("--group-bulk", action="store", default=1, type=int,
                        help='Group control: number of requests per group')
    parser.add_argument("--group-policy", action="store", default='rule', type=str,
                        help='Group control: policy used to group. enum{rule, dest, src_dest, rule_src_dest}')
    parser.add_argument('--source-strategy', action="store", default=None, type=str,
                        help='Source strategy. Overload the strategy defined in config DB.')
    parser.add_argument('--exclude-rses', action="store", default=None, type=str,
                        help='RSE expression to exclude')
    parser.add_argument('--include-rses', action="store", default=None, type=str,
                        help='RSE expression to include')
    parser.add_argument('--rses', nargs='+', type=str,
                        help='Explicit list of RSEs to include')
    parser.add_argument('--vos', nargs='+', type=str,
                        help='Optional list of VOs to consider. Only used in multi-VO mode.')
    parser.add_argument('--activities', nargs='+', type=str,
                        help='Explicit list of activities to include')
    parser.add_argument('--sleep-time', action="store", default=600, type=int,
                        help='Seconds to sleep if few requests')
    return parser


if __name__ == "__main__":

    signal.signal(signal.SIGTERM, stop)
    parser = get_parser()
    args = parser.parse_args()
    try:
        run(once=args.run_once,
            total_threads=args.total_threads,
            bulk=args.bulk,
            group_bulk=args.group_bulk,
            include_rses=args.include_rses,
            exclude_rses=args.exclude_rses,
            rses=args.rses,
            vos=args.vos,
            source_strategy=args.source_strategy,
            activities=args.activities,
            sleep_time=args.sleep_time)
    except KeyboardInterrupt:
        stop()
