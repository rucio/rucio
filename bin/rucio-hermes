#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright 2014-2021 CERN
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Authors:
# - Mario Lassnig <mario.lassnig@cern.ch>, 2014-2017
# - Vincent Garonne <vincent.garonne@cern.ch>, 2018
# - Hannes Hansen <hannes.jakob.hansen@cern.ch>, 2018
# - Benedikt Ziemons <benedikt.ziemons@cern.ch>, 2020
# - David Poblaci√≥n Criado <david.poblacion.criado@cern.ch>, 2021

"""
Hermes is a daemon to deliver messages to an asynchronous broker.
"""

import argparse
import signal

from rucio.daemons.hermes.hermes import run, stop


def get_parser():
    """
    Returns the argparse parser.
    """
    parser = argparse.ArgumentParser(description="The Hermes daemon is responsible for delivering messages via STOMP to a messagebroker and via SMTP as email.", formatter_class=argparse.RawDescriptionHelpFormatter, epilog='''
Create a message::

  $ python
  from rucio.core.message import add_message
  add_message(event_type='NEW_DID', payload='There is a new DID')

Run the daemon::

  $ rucio-hermes --run-once
    ''')
    parser.add_argument("--run-once", action="store_true", default=False, help='One iteration only')
    parser.add_argument("--threads", action="store", default=1, type=int, help='Concurrency control: number of threads')
    parser.add_argument("--bulk", action="store", default=1000, type=int, help='Bulk control: number of requests per cycle')
    parser.add_argument("--delay", action="store", default=60, type=int, help='OBSOLETE, PLEASE USE --sleep-time INSTEAD. Delay control: second control per cycle')
    parser.add_argument("--broker-timeout", action="store", default=3, type=int, help='Broker control: timeout second per cycle')
    parser.add_argument("--broker-retry", action="store", default=3, type=int, help='Broker control: number of retries per cycle')
    parser.add_argument("--sleep-time", action="store", default=60, type=int, help='Delay control: second control per cycle')
    return parser


if __name__ == "__main__":

    signal.signal(signal.SIGTERM, stop)

    parser = get_parser()
    args = parser.parse_args()
    try:
        run(once=args.run_once,
            threads=args.threads,
            bulk=args.bulk,
            delay=args.delay,
            broker_timeout=args.broker_timeout,
            broker_retry=args.broker_retry,
            sleep_time=args.sleep_time)
    except KeyboardInterrupt:
        stop()
