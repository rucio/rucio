#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Copyright 2019-2021 CERN
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Authors:
# - Jaroslav Guenther <jaroslav.guenther@cern.ch>, 2019
# - Benedikt Ziemons <benedikt.ziemons@cern.ch>, 2020
# - David Poblaci√≥n Criado <david.poblacion.criado@cern.ch>, 2021

"""
OAuth Manager is a daemon which is reponsible for:
- deletion of expired access tokens (in case there is a valid refresh token, expired access tokens will be kept until refresh_token expires as well.)
- deletion of expired OAuth session parameters
- refreshing access tokens via their refresh tokens.
"""

import argparse
import signal

from rucio.daemons.oauthmanager.oauthmanager import run, stop


def get_parser():
    """
    Returns the argparse parser.
    """
    parser = argparse.ArgumentParser(description='''

OAuth Manager is a daemon which is reponsible for:
- deletion of expired access tokens (in case there is a valid refresh token,
  expired access tokens will be kept until refresh_token expires as well.)
- deletion of expired OAuth session parameters
- refreshing access tokens via their refresh tokens.

These 3 actions run consequently one after another in a loop with a sleeptime of 'looprate' seconds.
The maximum number of DB rows (tokens, parameters, refresh tokens) on which the script will operate
can be specified by 'maxrows' parameter.

''')  # NOQA: E501
    parser.add_argument("--max-rows", action="store", default=1000, help='Max number of DB rows to deal with per operation.')
    parser.add_argument("--loop-rate", action="store", default=300, help='OBSOLETE, USE --sleep-time INSTEAD. The number of seconds the daemon will wait before running next loop of operations.')
    parser.add_argument("--run-once", action="store_true", default=False, help='One iteration only.')
    parser.add_argument("--threads", action="store", default=1, type=int, help='Concurrency control: total number of threads for this process')
    parser.add_argument("--sleep-time", action="store", default=300, type=int, help='The number of seconds the daemon will wait before running next loop of operations.')

    return parser


if __name__ == "__main__":
    signal.signal(signal.SIGTERM, stop)
    PARSER = get_parser()
    ARGS = PARSER.parse_args()
    try:
        run(once=ARGS.run_once, max_rows=ARGS.max_rows, loop_rate=ARGS.loop_rate, threads=ARGS.threads,
            sleep_time=ARGS.sleep_time)
    except KeyboardInterrupt:
        stop()
