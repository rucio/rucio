#!/usr/bin/env python
# Copyright 2018-2020 CERN
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Authors:
# - Vincent Garonne <vincent.garonne@cern.ch>, 2018
# - Benedikt Ziemons <benedikt.ziemons@cern.ch>, 2020
# - Martin Barisits <martin.barisits@cern.ch>, 2020

"""
Utility script to generate header file
Usage: add_header {file name}
Highly recommended usage: add_header -i <source_file{.py,.sh}>
"""

import argparse
import collections
import datetime
import sys
import traceback

try:
    import commands
except ImportError:
    import subprocess as commands

author_map = {
    ("Vincent Garonne", "<vgaronne@gmail.com>"): ("Vincent Garonne", "<vincent.garonne@cern.ch>"),
    ("Mario Lassnig", "<mario@lassnig.net>"): ("Mario Lassnig", "<mario.lassnig@cern.ch>"),
    ("Jaroslav Guenther", "<jaroslav.guenther@gmail.com>"): ("Jaroslav Guenther", "<jaroslav.guenther@cern.ch>"),
    ("Jaroslav Guenther", "<Jaroslav.Guenther@cern.ch>"): ("Jaroslav Guenther", "<jaroslav.guenther@cern.ch>"),
    ("Tomas Javurek", "<tomasjavurek09@gmail.com>"): ("Tomas Javurek", "<tomas.javurek@cern.ch>"),
    ("Tomas", "<tomasjavurek09@gmail.com>"): ("Tomas Javurek", "<tomas.javurek@cern.ch>"),
    ("Wen Guan", "<wguan.icedew@gmail.com>"): ("Wen Guan", "<wen.guan@cern.ch>"),
    ("Alessandro Di Girolamo", "<digirola@lxplus030.cern.ch>"): ("Ale Di Girolamo", "<alessandro.di.girolamo@cern.ch>"),
    ("elichad", "<eli.chadwick.256@gmail.com>"): ("Eli Chadwick", "<eli.chadwick@stfc.ac.uk>"),
    ("Eli Chadwick", "<eli.chadwick.256@gmail.com>"): ("Eli Chadwick", "<eli.chadwick@stfc.ac.uk>"),
    ("efajardo", "<efajardo@physics.ucsd.edu>"): ("Edgar Fajardo", "<emfajard@ucsd.edu>"),
    ("patrick-austin", "<patrick.austin@stfc.ac.uk>"): ("Patrick Austin", "<patrick.austin@stfc.ac.uk>"),
    ("patrick-austin", "<61705287+patrick-austin@users.noreply.github.com>"): ("Patrick Austin", "<patrick.austin@stfc.ac.uk>"),
    ("gabrielefronze", "<sucre.91@hotmail.it>"): ("Gabriele Fronze'", "<gfronze@cern.ch>"),
    ("Gabriele", "<sucre.91@hotmail.it>"): ("Gabriele Fronze'", "<gfronze@cern.ch>"),
    ("Ruturaj", "<ruturaj2305@gmail.com>"): ("Ruturaj Gujar", "<ruturaj.gujar23@gmail.com>"),
    ("Ruturaj123", "<ruturaj2305@gmail.com>"): ("Ruturaj Gujar", "<ruturaj.gujar23@gmail.com>"),
    ("Boris", "<Boris.Bauermeister@fysik.su.se>"): ("Boris Bauermeister", "<boris.bauermeister@fysik.su.se>"),
    ("Nicolo Magini", "<Nicolo.Magini@cern.ch>"): ("Nicolo Magini", "<nicolo.magini@cern.ch>"),
    ("jamesp-epcc", "<j.perry@epcc.ed.ac.uk>"): ("James Perry", "<j.perry@epcc.ed.ac.uk>"),
    ("David Cameron", "<d.g.cameron@gmail.com>"): ("David Cameron", "<david.cameron@cern.ch>"),
    ("Eric Vaandering", "<ericvaandering@gmail.com>"): ("Eric Vaandering", "<ewv@fnal.gov>"),
    ("Fernando López", "<fernando.e.lopez@gmail.com>"): ("Fernando López", "<felopez@cern.ch>"),
    ("Lister", "<andrew.lister@stfc.ac.uk>"): ("Andrew Lister", "<andrew.lister@stfc.ac.uk>"),
    ("javor", "<33832672+TomasJavurek@users.noreply.github.com>"): ("Tomas Javurek", "<tomas.javurek@cern.ch>"),
    ("cserf", "<cedric.serfon@cern.ch>"): ("Cedric Serfon", "<cedric.serfon@cern.ch>"),
}


def map_authors(author, mail):
    return author_map.get((author, mail), (author, mail))


def main(arguments):
    now = datetime.datetime.now()

    # Get username and mail from git
    cmd = 'git config --get user.name'
    status, username = commands.getstatusoutput(cmd)
    username = username.strip()
    cmd = 'git config --get user.email'
    status, email = commands.getstatusoutput(cmd)
    email = email.strip()
    email = '<%s>' % email

    for MyFile in arguments.MyFiles:
        # Query log history
        cmd = '''git log --reverse --date=short --format='%s'  %s ''' % ('%aN,<%aE>,%ad', MyFile)
        status, output = commands.getstatusoutput(cmd)

        # parse git log output
        authors = collections.OrderedDict()
        min, max = now.year, now.year
        for line in output.split('\n'):
            # remove leading and trailing whitespace
            line = line.strip()
            if line == '':
                continue

            # split the line into words
            try:
                author, mail, date = line.split(',')
            except ValueError:
                traceback.print_exc(limit=20, file=sys.stderr)
                print("Offending line:", line)
                sys.exit(1)
            author, mail = map_authors(author, mail)
            year = int(date.split('-')[0])

            if int(min) > int(year):
                min = year

            if author not in authors:
                authors[author] = {'name': author,
                                   'mail': mail,
                                   'max': year,
                                   'min': year}
            else:
                if year > authors[author]['max']:
                    authors[author]['max'] = year
                if year < authors[author]['min']:
                    authors[author]['min'] = year

            if authors[author]['name'] == username:
                authors[author]['max'] = now.year

        if username not in authors:
            authors[username] = {'name': username,
                                 'mail': email,
                                 'max': max,
                                 'min': now.year}

        header = ''
        if arguments.documentation:

            if int(min) == int(max):
                header += '..  Copyright %s CERN\n' % max
            else:
                header += '..  Copyright %s-%s CERN\n' % (min, max)
            header += '''    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Authors:\n'''
            for author in authors:
                if int(authors[author]['min']) == int(authors[author]['max']):
                    header += '   - %(name)s %(mail)s, %(min)s\n' % authors[author]
                else:
                    header += '   - %(name)s %(mail)s, %(min)s-%(max)s\n' % authors[author]

            if not arguments.dry_run:
                with open(MyFile, 'r') as original:
                    data = original.read()

                with open(MyFile, 'w') as modified:
                    modified.write(header + data)
            else:
                print(header)

            sys.exit(0)

        if str(MyFile).endswith('.py'):
            header += '# -*- coding: utf-8 -*-\n'

        if int(min) == int(max):
            header += '# Copyright %s CERN\n' % max
        else:
            header += '# Copyright %s-%s CERN\n' % (min, max)

        header += '''#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Authors:
'''
        for author in authors:
            if int(authors[author]['min']) == int(authors[author]['max']):
                header += '# - %(name)s %(mail)s, %(min)s\n' % authors[author]
            else:
                header += '# - %(name)s %(mail)s, %(min)s-%(max)s\n' % authors[author]
        header += '\n'

        if not arguments.dry_run:
            if not arguments.in_place:
                with open(MyFile, 'r') as original:
                    data = original.read()

                with open(MyFile, 'w') as modified:
                    modified.write(header + data)
            else:
                try:
                    with open(MyFile, 'r') as original:
                        lines = original.readlines()
                except UnicodeDecodeError as e:
                    raise RuntimeError('Cannot read file ' + str(MyFile)) from e

                with open(MyFile, 'w') as modified:
                    if lines[0].startswith('#!/usr/bin/env python'):
                        modified.write(lines[0])
                    elif lines[0].rstrip() == '#!/bin/bash':
                        modified.write(lines[0])
                    elif lines[0].rstrip() == '#!/bin/sh':
                        modified.write(lines[0])
                    modified.write(header)

                    count = 50  # only deletes old comments in the first n lines or until the first non-comment
                    for line in lines:
                        not_comment_line = not line.startswith('#') and len(line.lstrip()) != 0
                        if count != 0 and not_comment_line:
                            count = 0
                        if count == 0 or not_comment_line:
                            modified.write(line)

        else:
            print(header)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--documentation', '-D', dest='documentation', action='store_true', default=False,
                        help='Generate header for documentation file.')
    parser.add_argument('--in-place', '-i', action='store_true', default=False,
                        help='Edit files in-place (otherwise prepend).')
    parser.add_argument('--dry-run', '-d', action='store_true', help='Dry run mode')
    parser.add_argument(dest='MyFiles', action='store', nargs='+', default=None, help='The files')

    main(parser.parse_args())
