# -*- coding: utf-8 -*-
# Copyright European Organization for Nuclear Research (CERN) since 2012
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# shellcheck disable=SC2034  # Loaded for side effects and shared globals
: "${SCRIPT_DIR:?}"
: "${BOOTSTRAP_ROOT:?}"
: "${BOOTSTRAP_REPO_ROOT:?}"

# Default compose command; updated via bootstrap_docker::set_compose_command.
: "${COMPOSE_CMD:=docker compose}"

# bootstrap_docker::set_compose_command <command>
# ----------------------------------------------
# Store the compose command string for later calls.
#
function bootstrap_docker::set_compose_command() {
  COMPOSE_CMD="$1"
}

# bootstrap_docker::compose_cmd_string
# ----------------------------------------------
# Return the saved compose command.
#
function bootstrap_docker::compose_cmd_string() {
  echo "$COMPOSE_CMD"
}

# bootstrap_docker::is_compose_v2
# ----------------------------------------------
# Check whether the compose command uses Docker's v2 syntax.
#
function bootstrap_docker::is_compose_v2() {
  [[ "$COMPOSE_CMD" == "docker compose" ]]
}

# bootstrap_docker::compose <args...>
# ----------------------------------------------
# Run the compose command with the given arguments.
#
function bootstrap_docker::compose() {
  local compose_parts=()
  # shellcheck disable=SC2206  # intentional word splitting into an array
  compose_parts=($COMPOSE_CMD)
  if (( ${#compose_parts[@]} == 0 )); then
    bootstrap_common::error "Compose command is empty."
    return 1
  fi
  compose_parts+=("$@")
  "${compose_parts[@]}"
}

# bootstrap_docker::detect_compose_command
# ----------------------------------------------
# Detect whether docker-compose (v1) or docker compose (v2) is available.
#
function bootstrap_docker::detect_compose_command() {
  if command -v docker-compose >/dev/null 2>&1; then
    echo "docker-compose"
  elif docker compose version >/dev/null 2>&1; then
    echo "docker compose"
  else
    bootstrap_common::error "Neither 'docker-compose' nor 'docker compose' is available."
    return 1
  fi
}

# bootstrap_docker::ensure_daemon_running
# ----------------------------------------------
# Exit when the Docker daemon is not reachable.
#
function bootstrap_docker::ensure_daemon_running() {
  if ! docker info >/dev/null 2>&1; then
    bootstrap_common::error "Docker doesn't seem to be running, or you lack privileges."
    exit 1
  fi
}

# bootstrap_docker::remove_rucio_db_volume
# ----------------------------------------------
# Remove the dev database volume and any containers using it.
#
function bootstrap_docker::remove_rucio_db_volume() {
  local volume="dev_vol-ruciodb-data"
  local containers
  containers=$(docker ps -aq --filter "volume=$volume" 2>/dev/null || true)
  if [[ -n "$containers" ]]; then
    bootstrap_common::info "Removing containers using volume '$volume'..."
    docker rm -f $containers >/dev/null 2>&1 || true
  fi

  if docker volume inspect "$volume" >/dev/null 2>&1; then
    bootstrap_common::info "Removing existing database volume '$volume' to ensure a clean test database..."
    docker volume rm -f "$volume" >/dev/null 2>&1 || true
  fi
}

# bootstrap_docker::remove_autotest_volumes
# ----------------------------------------------
# Delete autotest volumes that follow the autogenerated naming pattern.
#
function bootstrap_docker::remove_autotest_volumes() {
  local volumes
  volumes=$(docker volume ls --format '{{.Name}}' | grep -E '^[0-9a-f]{16}_vol-' || true)
  if [[ -n "$volumes" ]]; then
    bootstrap_common::info "Removing autogenerated autotest volumes..."
    docker volume rm $volumes >/dev/null 2>&1 || true
  fi
}

# stop_dev_containers [project_name]
# Stops all docker compose services for the given project and removes leftovers
# using the naming convention <project_name>-*.
#
# bootstrap_docker::stop_dev_containers [project_name]
# ----------------------------------------------
# Stop and remove containers created by the dev compose project.
#
function bootstrap_docker::stop_dev_containers() {
  local project_name="${1:-dev}"
  local compose_dir
  compose_dir="$(bootstrap_common::repo_root)/etc/docker/dev"
  if [[ -d "$compose_dir" ]]; then
    (
      cd "$compose_dir"
      bootstrap_common::info "Stopping any previous containers from '$project_name' environment..."
      bootstrap_docker::compose --project-name "$project_name" --file docker-compose.yml \
        --profile default \
        --profile monitoring \
        --profile storage \
        --profile externalmetadata \
        --profile iam \
        --profile client \
        --profile postgres14 \
        --profile mysql8 \
        --profile oracle \
        down >/dev/null 2>&1 || true
    )
  fi

  local leftovers
  local name_filter
  name_filter="^${project_name}-"
  leftovers=$(docker ps -aq --filter "name=$name_filter" 2>/dev/null || true)
  if [[ -n "$leftovers" ]]; then
    bootstrap_common::info "Removing leftover '$project_name' containers to avoid conflicts..."
    docker rm -f $leftovers >/dev/null 2>&1 || true
  fi
}
