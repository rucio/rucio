from rucio.client.client import Client
import requests
import sys
import zlib
import re


# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

index = 1


def set_browser_enabled(rse, browser_enabled):

    if 'browser_enabled' in c.list_rse_attributes(rse):
        c.delete_rse_attribute(rse, 'browser_enabled')
    c.add_rse_attribute(str(rse), 'browser_enabled', browser_enabled)


def verifyDownload(rse, response, success_list, error_list, wrong_checksum_list):

    try:
        cont = response.content
        adler = zlib.adler32(cont, 1L)
        # backflip on 32bit
        if adler < 0:
            adler = adler + 2 ** 32
            print('Adler checksum: ' + str('%08x' % adler))
        if str('%08x' % adler) != '5d000974':
            wrong_checksum_list.append(rse + ' : checksum ' + str('%08x' % adler))
        else:
            success_list.append(str(rse))
            set_browser_enabled(rse, True)
            # if 'browser_enabled' in c.list_rse_attributes(rse):
            #     c.delete_rse_attribute(rse, 'browser_enabled')
            # c.add_rse_attribute(str(rse), 'browser_enabled', True)
            print('Checksum corrent!')
    except:
        e_type = sys.exc_info()[0]
        e_value = sys.exc_info()[1]
        e_traceback = sys.exc_info()[2]
        error_list.append(str(rse) + ': Error while verifying! ' + str(e_type) + ' ' + str(e_value) + ' ' + str(e_traceback))
        set_browser_enabled(rse, False)
        # if 'browser_enabled' in c.list_rse_attributes(rse):
        #     c.delete_rse_attribute(rse, 'browser_enabled')
        # c.add_rse_attribute(str(rse), 'browser_enabled', False)
        print('An error occurred while verifying download, see error list for details.')


if __name__ == "__main__":

    c = Client()
    r = c.list_replicas([{'scope': 'user.mlassnig', 'name': 'user.mlassnig.pilot.test.single.hits'}], schemes=['davs'])
    error_list = []
    empty_list = []
    wrong_checksum_list = []
    success_list = []
    http_error_list = []
    skipped_list = []

    for replica in r:
        rses = replica['rses']
        for rse in rses:
            p = c.get_protocols(str(rse), scheme='davs')  # skip rse if not available
            if p['availability_read'] is False:
                skipped_list.append(rse)
                continue
            tmp = rses[rse]
            try:
                link = tmp.pop()
                print(str(index) + ': ' + str(rse) + ' ...')
                link = 'https' + link[4:]
                response = requests.get(link, cert='/afs/cern.ch/user/s/sprenner/.globus/usercert_with_key.pem', verify=False)
                # print(response.headers)
                try:
                    if 'text/html' in response.headers.get('content-type'):
                        response_text = str(response.text)
                        number_length = 3
                        pattern = r"\D(\d{%d})\D" % number_length  # \D to avoid matching 4 digit (or more) numbers
                        http_error_list.append(str(rse) + ': ' + str(list(set(re.findall(pattern, response_text)))))  # conversion to set to delete duplicates, back to list to get rid of 'set' when printing
                        # print(response_text)
                    else:
                        verifyDownload(rse, response, success_list, error_list, wrong_checksum_list)
                except TypeError as te:
                    print('HTTP Header did not have content-type attribute. Attempting download...')
                    verifyDownload(rse, response, success_list, error_list, wrong_checksum_list)
            except IndexError as e:
                print(str(index) + ': ' + str(rse) + ': Link is empty.')
                empty_list.append(rse)
                set_browser_enabled(rse, False)
                # if 'browser_enabled' in c.list_rse_attributes(rse):
                #     c.delete_rse_attribute(rse, 'browser_enabled')
                # c.add_rse_attribute(str(rse), 'browser_enabled', False)
            except:
                e_type = sys.exc_info()[0]
                e_value = sys.exc_info()[1]
                e_traceback = sys.exc_info()[2]
                error_list.append(str(rse) + ': ' + str(e_type) + ' ' + str(e_value) + ' ' + str(e_traceback))
                set_browser_enabled(rse, False)
                # if 'browser_enabled' in c.list_rse_attributes(rse):
                #     c.delete_rse_attribute(rse, 'browser_enabled')
                # c.add_rse_attribute(str(rse), 'browser_enabled', False)
                print('An error occurred, see error list for details.')
            link = None
            index += 1
            print('Browser enabled for ' + str(rse) + ': ' + str(c.list_rse_attributes(rse).get('browser_enabled')))

    print('Finished!')
    print('Empty links (' + str(len(empty_list)) + '): ' + str(empty_list))
    print('Http Error list (' + str(len(http_error_list)) + '): ' + str(http_error_list))
    print('Links of other errors (' + str(len(error_list)) + '): ' + str(error_list))
    print('List of wrong checksums (' + str(len(wrong_checksum_list)) + '): ' + str(wrong_checksum_list))
    print('Success (' + str(len(success_list)) + '): ' + str(success_list))
    print('Skipped RSEs (' + str(len(skipped_list)) + '): ' + str(skipped_list))
    sys.exit(OK)
