#!/usr/bin/env python
# Copyright 2017-2021 CERN
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Authors:
# - Martin Barisits <martin.barisits@cern.ch>, 2017-2021

from __future__ import print_function

import subprocess
import sys
import requests
import json

if __name__ == "__main__":
    requests.packages.urllib3.disable_warnings()

COMPONENT_COLOR = 'd4c5f9'

option_rst = False
option_backport = False

if len(sys.argv) == 1:
    print('generate-release-notes VERSION [--rst] [--backport]')
    sys.exit(-1)
for arg in sys.argv:
    if arg == '--rst':
        option_rst = True
    elif arg == '--backport':
        option_backport = True
    else:
        milestone_title = arg

def format_issue(issue, rst=False):
    if not rst:
        if issue['component']:
            return '- %s: %s #%s' % (issue['component'], issue['title'], issue['number'])
        else:
            return '- %s #%s' % (issue['title'], issue['number'])
    else:
        if issue['component']:
            return '- %s: %s `#%s <https://github.com/rucio/rucio/issues/%s>`_' % (issue['component'], issue['title'], issue['number'], issue['number'])
        else:
            return '- %s `#%s <https://github.com/rucio/rucio/issues/%s>`_' % (issue['title'], issue['number'], issue['number'])


def load_milestones(github_token, page=1):
    r = requests.get(url='https://api.github.com/repos/rucio/rucio/milestones',
                     headers={'Authorization': 'token %s' % github_token},
                     params={'state': 'all', 'page': page, 'per_page': '100'})
    return json.loads(r.text)

def get_issue_component_type(issue):
    component = None
    type = 'enhancement'
    for label in issue['labels']:
        if label['color'] == COMPONENT_COLOR and not component:
            component = label['name']
            next
        elif label['name'].lower() == 'enhancement':
            type = 'enhancement'
        elif label['name'].lower() == 'bug':
            type = 'bug'
        elif label['name'].lower() == 'feature':
            type = 'feature'
    return component, type

root_git_dir = subprocess.check_output('git rev-parse --show-toplevel', shell=True).decode("utf-8").rstrip()
# Load OAUTH token
try:
    with open(root_git_dir + '/.githubtoken', 'r') as f:
        github_token = f.readline().strip()
except:
    print('No github token file found at %s' % root_git_dir + '/.githubtoken')
    sys.exit(-1)

# Get all Milestones
page = 1
milestones = load_milestones(github_token, page)
while len(milestones) == page * 100:
    page += 1
    milestones.extend(load_milestones(github_token, page))
for milestone in milestones:
    if milestone['title'] == milestone_title:
        milestone_number = milestone['number']
        break

# Get the issues
issues = []
r = requests.get(url='https://api.github.com/repos/rucio/rucio/issues',
                 headers={'Authorization': 'token %s' % github_token},
                 params={'milestone': milestone_number, 'state': 'closed', 'per_page': 100})
for issue in json.loads(r.text):
    component, type = get_issue_component_type(issue)
    issues.append({'component': component,
                   'type': type,
                   'number': issue['number'],
                   'title': issue['title']})
# If --backport is specified, we additionally need to scan older issues
if option_backport:
    r = requests.get(url='https://api.github.com/repos/rucio/rucio/issues',
                 headers={'Authorization': 'token %s' % github_token},
                 params={'labels': 'backport', 'state': 'closed', 'per_page': 100})
    for issue in json.loads(r.text):
        # Load the comments
        r = requests.get(url=issue['comments_url'],
                 headers={'Authorization': 'token %s' % github_token},
                 params={'per_page': 100})
        # Iterate comments
        for comment in json.loads(r.text):
            if 'backport %s' % milestone_title in comment['body'].lower():
                component, type = get_issue_component_type(issue)
                issues.append({'component': component,
                   'type': type,
                   'number': issue['number'],
                   'title': issue['title']})

# Generate the formated printout
bugs = [issue for issue in issues if issue['type'] == 'bug']
bugs = sorted(bugs, key=lambda k: "%s %d" % (k['component'], k['number']))
enhancements = [issue for issue in issues if issue['type'] == 'enhancement']
enhancements = sorted(enhancements, key=lambda k: "%s %d" % (k['component'], k['number']))
features = [issue for issue in issues if issue['type'] == 'feature']
features = sorted(features, key=lambda k: "%s %d" % (k['component'], k['number']))

if not option_rst:
    if features:
        print('## Features\n')
        for issue in features:
            print(format_issue(issue))
        print('')
    if enhancements:
        print('## Enhancements\n')
        for issue in enhancements:
            print(format_issue(issue))
        print('')
    if bugs:
        print('## Bugs\n')
        for issue in bugs:
            print(format_issue(issue))
else:
    if features:
        print('********')
        print('Features')
        print('********\n')
        for issue in features:
            print(format_issue(issue, rst=True))
        print('')
    if enhancements:
        print('************')
        print('Enhancements')
        print('************\n')
        for issue in enhancements:
            print(format_issue(issue, rst=True))
        print('')
    if bugs:
        print('****')
        print('Bugs')
        print('****\n')
        for issue in bugs:
            print(format_issue(issue, rst=True))
