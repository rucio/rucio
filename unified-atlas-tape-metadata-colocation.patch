diff --git a/lib/rucio/transfertool/fts3.py b/lib/rucio/transfertool/fts3.py
index 5fb390ada..771234ea6 100644
--- a/lib/rucio/transfertool/fts3.py
+++ b/lib/rucio/transfertool/fts3.py
@@ -1041,7 +1041,7 @@ class FTS3Transfertool(Transfertool):
             if isinstance(activity_id, int):
                 t_file['scitag'] = self.scitags_exp_id << 6 | activity_id
 
-        if t_file['metadata']['dst_type'] == 'TAPE':
+        if t_file['metadata']['dst_type'] == 'TAPE' and rws.dest_rse.attributes.get('enable_archive_metadata'):
             for plugin in self.tape_metadata_plugins:
                 t_file = deep_merge_dict(source=plugin.hints(t_file['metadata']), destination=t_file)
 
diff --git a/lib/rucio/transfertool/fts3_plugins.py b/lib/rucio/transfertool/fts3_plugins.py
index b4c5ebe03..3d04dfe39 100644
--- a/lib/rucio/transfertool/fts3_plugins.py
+++ b/lib/rucio/transfertool/fts3_plugins.py
@@ -14,13 +14,16 @@
 
 import json
 import sys
-from collections.abc import Callable
-from configparser import NoSectionError
-from typing import Any, Optional, TypeVar
+from typing import TYPE_CHECKING, Any, Optional, TypeVar, Union
 
-from rucio.common.config import config_get_int, config_get_items
+import rucio.core.did
+from rucio.common.config import config_get_int
 from rucio.common.exception import InvalidRequest
 from rucio.common.plugins import PolicyPackageAlgorithms
+from rucio.db.sqla.constants import DIDType
+
+if TYPE_CHECKING:
+    from collections.abc import Callable, Iterator
 
 FTS3TapeMetadataPluginType = TypeVar('FTS3TapeMetadataPluginType', bound='FTS3TapeMetadataPlugin')
 
@@ -32,7 +35,7 @@ class FTS3TapeMetadataPlugin(PolicyPackageAlgorithms):
     """
 
     ALGORITHM_NAME = "fts3_tape_metadata_plugins"
-    _HINTS_NAME = "fts3_plugins_init"
+    _INIT_FUNC_NAME = "fts3_plugins_init"
     DEFAULT = "def"
 
     def __init__(self, policy_algorithm: str) -> None:
@@ -50,22 +53,20 @@ class FTS3TapeMetadataPlugin(PolicyPackageAlgorithms):
         if not self._supports(self.ALGORITHM_NAME, policy_algorithm):
             raise ValueError(f'Policy Algorithm {policy_algorithm} not found')
 
-        if self._supports(self._HINTS_NAME, policy_algorithm):
-            self._get_one_algorithm(self._HINTS_NAME, name=policy_algorithm)()
+        if self._supports(self._INIT_FUNC_NAME, policy_algorithm):
+            init_func = self._get_one_algorithm(self._INIT_FUNC_NAME, name=policy_algorithm)
+            init_func()
 
         self.set_in_hints = self._get_one_algorithm(self.ALGORITHM_NAME, name=policy_algorithm)
 
     @classmethod
     def _module_init(cls: type[FTS3TapeMetadataPluginType]) -> None:
-        cls.register(
-            "activity",
-            func=lambda x: cls._activity_hints(cls, x),  # type: ignore
-            init_func=lambda: cls._init_instance_activity_hints(cls))  # type: ignore
         cls.register(cls.DEFAULT, func=lambda x: cls._default(cls, x))  # type: ignore
         cls.register("test", func=lambda x: cls._collocation(cls._test_collocation, x))
+        cls.register("atlas", func=lambda x: cls._collocation(cls._atlas_collocation, x))
 
     @classmethod
-    def register(cls: type[FTS3TapeMetadataPluginType], name: str, func: Callable, init_func: Optional[Callable] = None) -> None:
+    def register(cls: type[FTS3TapeMetadataPluginType], name: str, func: 'Callable', init_func: Optional['Callable'] = None) -> None:
         """
         Register a fts3 transfer plugin
 
@@ -75,29 +76,7 @@ class FTS3TapeMetadataPlugin(PolicyPackageAlgorithms):
         """
         super()._register(cls.ALGORITHM_NAME, algorithm_dict={name: func})
         if init_func is not None:
-            super()._register(cls._HINTS_NAME, algorithm_dict={name: init_func})
-
-    def _init_instance_activity_hints(self) -> None:
-        """
-            Load prorities for activities from the config
-        """
-        try:
-            self.prority_table = dict(config_get_items("tape_priority"))
-        except NoSectionError:
-            self.prority_table = {}
-
-    def _activity_hints(self, activity_kwargs: dict[str, str], default_prority: str = '20') -> dict[str, dict]:
-        """ Activity Hints - assign a priority based on activity"""
-        if "activity" in activity_kwargs:
-            activity = activity_kwargs["activity"].lower()
-
-        else:
-            raise InvalidRequest("`activity` field not found in passed metadata")
-
-        default_prority = self.prority_table.get("default", default_prority)
-        priority = self.prority_table.get(activity, default_prority)
-
-        return {"scheduling_hints": {"priority": priority}}
+            super()._register(cls._INIT_FUNC_NAME, algorithm_dict={name: init_func})
 
     @staticmethod
     def _collocation(collocation_func: 'Callable', hints: dict[str, Any]) -> dict[str, dict]:
@@ -114,6 +93,35 @@ class FTS3TapeMetadataPlugin(PolicyPackageAlgorithms):
     def _test_collocation(**kwargs: dict) -> dict[str, Any]:
         return {"0": "", "1": "", "2": "", "3": ""}
 
+    @staticmethod
+    def _atlas_collocation(**hints: dict) -> dict[str, Optional[Union[str, "Iterator[dict[str, Any]]"]]]:
+        """
+        https://codimd.web.cern.ch/bmEXKlYqQbu529PUdAFfYw#
+
+        Example filename:
+        data23_13p6TeV.00452799.physics_Main.daq.RAW._lb0777._SFO-19._0001.data
+
+        Levels:
+        0 - project (e.g. "data23_13p6TeV")
+        1 - datatype (e.g. "RAW")
+        2 - stream_name (e.g. "physics_Main")
+        3 - dataset (e.g. "data23_13p6TeV.00452799.physics_Main.daq.RAW")
+        """
+        scope, name = hints['scope'], hints['name']
+        did_metadata = rucio.core.did.get_metadata(scope, name)
+        parent_dids = rucio.core.did.list_parent_dids(scope, name, order_by=['created_at'])
+        if parent_dids:
+            parent_did = next(parent_dids)
+        else:
+            parent_did = None
+
+        return {
+                "0": did_metadata['datatype'] or None,
+                "1": did_metadata['project'] or None,
+                "2": did_metadata['stream_name'] or None,
+                "3": parent_did,
+            }
+
     def _default(self, *hints: dict) -> dict:
         return {}
 
@@ -139,9 +147,74 @@ class FTS3TapeMetadataPlugin(PolicyPackageAlgorithms):
         :return: Archiving metadata in the format {archive_metadata: {<plugin produced hints>}}
         """
         hints = self.set_in_hints(hint_kwargs)
+        hints['additional_hints'] = {
+            "activity": hint_kwargs.get('activity'),
+        }
+
+        collocation_hints = hints.get('collocation_hints')
+
+        if collocation_hints:
+            dataset = collocation_hints.get('3')
+
+            if dataset:
+                dataset_did = rucio.core.did.get_did(dataset['scope'], dataset['name'], dynamic_depth=DIDType.DATASET)
+                hints['additional_hints']['3'] = {
+                    'length': dataset_did.get('length'),
+                    'size': dataset_did.get('bytes'),
+                }
+
+                hints['collocation_hints']['3'] = dataset['name']
+
+            # Remove collocation hints if not RAW
+            # (RAW is the only datatype with a collocation template for the moment)
+            if collocation_hints.get('0') != 'RAW':
+                hints.pop('collocation_hints', None)
+
+        hints['file_metadata'] = {
+            'size': hint_kwargs.get('filesize'),
+            'md5': hint_kwargs.get('md5'),
+            'adler32': hint_kwargs.get('adler32'),
+        }
+
+        hints['schema_version'] = 1
+
         self._verify_in_format(hints)
         return {"archive_metadata": hints}
 
 
+class ActivityBasedTransferPriorityPlugin(FTS3TapeMetadataPlugin):
+    def __init__(self, policy_algorithm: str = 'activity') -> None:
+        self.register(
+            policy_algorithm,
+            func=lambda x: self._get_activity_priority(x),
+            init_func=self._init_default_priority)
+        super().__init__(policy_algorithm)
+
+    def _init_default_priority(self) -> None:
+        self.default_priority = config_get_int(
+            "tape_priority",
+            option="default",
+            raise_exception=False,
+            default=20,
+        )
+
+    def _get_activity_priority(self, activity_kwargs: dict[str, str]) -> dict[str, dict]:
+        """ Activity Hints - assign a priority based on activity"""
+        if "activity" in activity_kwargs:
+            activity = activity_kwargs["activity"]
+        else:
+            raise InvalidRequest("`activity` field not found in passed metadata")
+
+        priority = config_get_int(
+            "tape_priority",
+            option=activity,
+            raise_exception=False,
+            default=self.default_priority,
+        )
+
+        return {"scheduling_hints": {"priority": priority}}
+
+
 # Register the policies
 FTS3TapeMetadataPlugin._module_init()
+ActivityBasedTransferPriorityPlugin()
