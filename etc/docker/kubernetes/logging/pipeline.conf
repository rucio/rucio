input {
  beats {
    port => 5044
  }
}

filter {
  if [kubernetes][labels][app] == "server" {
    if [message] =~ "kube-probe" {
      drop { }
    }
    if [stream] == "stdout" {
      grok {
        match => {"message" => '%{DATA}\t%{DATA:frontend}\t%{DATA:backend}\t%{DATA:clientip}\t%{DATA:requestid}\t%{NUMBER:status}\t%{NUMBER:bytesinput}\t%{NUMBER:bytesoutput}\t%{NUMBER:duration}\t"%{WORD:method} %{URIPATHPARAM:request} %{DATA:http}"\t"%{DATA:token}"\t"%{DATA:ua}"\t%{DATA:scriptid}'}
        tag_on_failure => "_failed_parsing_restcall"
      }
    
      if !("_failed_parsing_restcall" in [tags]) {  # A REST-API call was executed

        grok {
          match => { "token" => "%{WORD:account}-%{GREEDYDATA:username}-%{DATA}" }
          remove_field => [ "token" ]
        }

        grok {
          match => { "ua" => "%{DATA:[useragent][name]}/%{NOTSPACE:[useragent][version]}" }
          remove_field => [ "ua" ]
          tag_on_failure => "_failed_parsing_useragent"
        }

        if "_failed_parsing_useragent" in [tags] {  # In case the grok above didn't match, the raw useragent string from the log is used
          mutate {
            add_field => { "[useragent][name]" => "%{ua}" }
            remove_field => [ "ua" ]
            remove_tag => [ "_failed_parsing_useragent" ]
          }
        }

        if [clientip] =~ '\,\s' { mutate { gsub => ["clientip", ",\s.*$", ""] } } # Split client IP in case of proxy-forward (e.g. webui)

        geoip {  # Resolve Client GEOIP
          source => "clientip"
          target => "client"
          remove_field => [ "clientip" ]
        }
      }
    }
  }
}

output {
  elasticsearch { ... }
}
