name: dev

services:
  # ------------------------------------------------------------------
  # Main Rucio dev containers
  # ------------------------------------------------------------------
  rucioclient:
    container_name: dev-rucioclient-1
    image: "docker.io/${DOCKER_REPO:-rucio}/rucio-dev:${RUCIO_DEV_PREFIX:-}${RUCIO_TAG:-latest}"
    platform: linux/amd64
    entrypoint: ["/rucio_source/etc/docker/dev/rucio/entrypoint.sh"]
    command: ["sleep", "infinity"]
    profiles:
      - client
    volumes:
      - ../../certs/rucio_ca.pem:/etc/grid-security/certificates/5fca1cb1.0:ro
      - ../../certs/rucio_ca.pem:/opt/rucio/etc/rucio_ca.pem:ro
      - ../../certs/rucio_ca.pem:/etc/pki/ca-trust/source/anchors/rucio_ca.pem:ro
      - ../../certs/hostcert_rucio.pem:/etc/grid-security/hostcert.pem:z
      - ../../certs/hostcert_rucio.key.pem:/etc/grid-security/hostkey.pem:z
      - ../../certs/ruciouser.pem:/tmp/usercert.pem:z
      - ../../certs/ruciouser.key.pem:/tmp/userkey.pem:z
      - ../../certs/ruciouser.certkey.pem:/opt/rucio/etc/usercertkey.pem:z
      - ../../certs/ssh/ruciouser_sshkey.pub:/root/.ssh/ruciouser_sshkey.pub:z
      - ../../certs/ssh/ruciouser_sshkey:/root/.ssh/ruciouser_sshkey:z
      - ./rucio/idpsecrets.json:/opt/rucio/etc/idpsecrets.json:ro
      - ../../../tools:/opt/rucio/tools:Z
      - ../../../bin:/opt/rucio/bin:Z
      - ../../../lib:/opt/rucio/lib:Z
      - ../../../tests:/opt/rucio/tests:Z
      - ../../../:/rucio_source:Z
    environment:
      - REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt
      - RUCIO_SOURCE_DIR=/rucio_source
      - RDBMS

  rucio:
    container_name: dev-rucio-1
    image: "docker.io/${DOCKER_REPO:-rucio}/rucio-dev:${RUCIO_DEV_PREFIX:-}${RUCIO_TAG:-latest}"
    platform: linux/amd64
    entrypoint: ["/rucio_source/etc/docker/dev/rucio/entrypoint.sh"]
    command: ["httpd","-D","FOREGROUND"]
    volumes:
      - ../../certs/rucio_ca.pem:/etc/grid-security/certificates/5fca1cb1.0:ro
      - ../../certs/rucio_ca.pem:/opt/rucio/etc/rucio_ca.pem:ro
      - ../../certs/rucio_ca.pem:/etc/pki/ca-trust/source/anchors/rucio_ca.pem:ro
      - ../../certs/hostcert_rucio.pem:/etc/grid-security/hostcert.pem:z
      - ../../certs/hostcert_rucio.key.pem:/etc/grid-security/hostkey.pem:z
      - ../../certs/ruciouser.pem:/tmp/usercert.pem:z
      - ../../certs/ruciouser.key.pem:/tmp/userkey.pem:z
      - ../../certs/ruciouser.certkey.pem:/opt/rucio/etc/usercertkey.pem:z
      - ../../certs/ssh/ruciouser_sshkey.pub:/root/.ssh/ruciouser_sshkey.pub:z
      - ../../certs/ssh/ruciouser_sshkey:/root/.ssh/ruciouser_sshkey:z
      - ./rucio/idpsecrets.json:/opt/rucio/etc/idpsecrets.json:ro
      - ../../../tools:/opt/rucio/tools:Z
      - ../../../bin:/opt/rucio/bin:Z
      - ../../../lib:/opt/rucio/lib:Z
      - ../../../tests:/opt/rucio/tests:Z
      - ../../../:/rucio_source
    environment:
      - REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt
      - RUCIO_SOURCE_DIR=/rucio_source
      - RDBMS
      - DEV_PROFILES
    depends_on:
      oracle:
        condition: service_healthy
        required: false
      ruciodb:
        condition: service_healthy
        required: false
      postgres14:
        condition: service_healthy
        required: false
      elasticsearch:
        condition: service_healthy
        required: false
      influxdb:
        condition: service_healthy
        required: false

  # ------------------------------------------------------------------
  # Database, MQ, metrics, and other external services
  # ------------------------------------------------------------------
  ruciodb:
    container_name: dev-ruciodb-1
    image: docker.io/postgres:14
    environment:
      - POSTGRES_USER=rucio
      - POSTGRES_DB=rucio
      - POSTGRES_PASSWORD=secret
    command: ["-c", "fsync=off","-c", "synchronous_commit=off","-c", "full_page_writes=off"]
    volumes:
      - vol-ruciodb-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB || exit 1" ]
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 10

  graphite:
    container_name: dev-graphite-1
    image: docker.io/graphiteapp/graphite-statsd
    volumes:
      - vol-graphite-conf:/opt/graphite/conf
      - vol-graphite-storage:/opt/graphite/storage
      - vol-graphite-functions:/opt/graphite/webapp/graphite/functions/custom
      - vol-statsd-config:/opt/statsd/config
      - vol-graphite-redis:/var/lib/redis
      - vol-graphite-log:/var/log
      - vol-graphite-logrotate:/etc/logrotate.d
      - vol-graphite-nginx:/etc/nginx

  influxdb:
    container_name: dev-influxdb-1
    image: docker.io/influxdb:latest
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=myusername
      - DOCKER_INFLUXDB_INIT_PASSWORD=passwordpasswordpassword
      - DOCKER_INFLUXDB_INIT_ORG=rucio
      - DOCKER_INFLUXDB_INIT_BUCKET=rucio
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=mytoken
    volumes:
      - vol-influxdb-etc:/etc/influxdb2
      - vol-influxdb-var:/var/lib/influxdb2
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086/ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    container_name: dev-elasticsearch-1
    image: docker.io/elasticsearch:7.8.0
    environment:
      - discovery.type=single-node
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health?wait_for_status=yellow" ]
      interval: 10s
      timeout: 5s
      retries: 10

  activemq:
    container_name: dev-activemq-1
    image: docker.io/apache/activemq-classic:5.18.7
    platform: linux/amd64
    volumes:
      - ./activemq/users.properties:/opt/apache-activemq/conf/users.properties
    environment:
      # web portal access, helpful for debugging
      ACTIVEMQ_WEB_USER: activemq
      ACTIVEMQ_WEB_PASSWORD: supersecret

  postgres14:
    container_name: dev-postgres14-1
    image: docker.io/postgres:14
    profiles:
      - postgres14
    environment:
      - POSTGRES_USER=rucio
      - POSTGRES_DB=rucio
      - POSTGRES_PASSWORD=rucio
    command: ["-c", "fsync=off","-c", "synchronous_commit=off","-c", "full_page_writes=off"]
    volumes:
      - vol-postgres14-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB || exit 1" ]
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 10

  mysql8:
    container_name: dev-mysql8-1
    image: docker.io/mysql:8.3
    profiles:
      - mysql8
    environment:
      - MYSQL_USER=rucio
      - MYSQL_PASSWORD=rucio
      - MYSQL_ROOT_PASSWORD=rucio
      - MYSQL_DATABASE=rucio
      - MYSQL_TCP_PORT=3308
    command:
      - "--default-authentication-plugin=mysql_native_password"
      - "--character-set-server=latin1"
    volumes:
      - vol-mysql8-mysql:/var/lib/mysql

  oracle:
    container_name: dev-oracle-1
    image: docker.io/gvenzl/oracle-xe:18.4.0
    platform: linux/amd64
    profiles:
      - oracle
    environment:
      - ORACLE_PASSWORD=rucio
      - ORACLE_ALLOW_REMOTE=true
      - ORACLE_DISABLE_ASYNCH_IO=true
      - processes=1000
      - sessions=1105
      - transactions=1215
    volumes:
      - ./oracle_setup.sh:/container-entrypoint-initdb.d/oracle_setup.sh:Z
    healthcheck:
      test: [ "CMD-SHELL", "/opt/oracle/healthcheck.sh > /dev/null || exit 1" ]
      interval: 10s
      timeout: 5s
      start_period: 60s
      retries: 10

  # ------------------------------------------------------------------
  # FTS and XRootD containers (test RSEs)
  # ------------------------------------------------------------------
  fts:
    container_name: dev-fts-1
    image: "docker.io/${DOCKER_REPO:-rucio}/test-fts:${RUCIO_TAG:-latest}"
    platform: linux/amd64
    profiles:
      - storage
    volumes:
      - ./fts/entrypoint.sh:/docker-entrypoint.sh:ro
      - ../../certs/rucio_ca.pem:/etc/pki/ca-trust/source/anchors/rucio_ca.pem:ro
      - ../../certs/rucio_ca.pem:/etc/grid-security/certificates/5fca1cb1.0:z
      - ../../certs/hostcert_fts.pem:/etc/grid-security/hostcert.pem:Z
      - ../../certs/hostcert_fts.key.pem:/etc/grid-security/hostkey.pem:Z
      - ./fts/fts3restconfig:/etc/fts3/fts3restconfig:ro
    environment:
      - REQUESTS_CA_BUNDLE=/etc/pki/tls/certs/ca-bundle.crt
    ulimits:
      nofile:
        soft: 10240
        hard: 10240

  ftsdb:
    container_name: dev-ftsdb-1
    image: docker.io/mysql:8.3
    profiles:
      - storage
    command: --default-authentication-plugin=mysql_native_password
    environment:
      - MYSQL_USER=fts
      - MYSQL_PASSWORD=fts
      - MYSQL_ROOT_PASSWORD=fts
      - MYSQL_DATABASE=fts
    volumes:
      - vol-ftsdb-mysql:/var/lib/mysql

  xrd1:
    container_name: dev-xrd1-1
    image: "docker.io/${DOCKER_REPO:-rucio}/test-xrootd:${RUCIO_TAG:-latest}"
    platform: linux/amd64
    profiles:
      - storage
    environment:
      - XRDHOST=xrd1
      - XRDPORT=1094
    volumes:
      - ../../certs/rucio_ca.pem:/etc/grid-security/certificates/5fca1cb1.0:z
      - ../../certs/hostcert_xrd1.pem:/tmp/xrdcert.pem:Z
      - ../../certs/hostcert_xrd1.key.pem:/tmp/xrdkey.pem:Z
    ulimits:
      nofile:
        soft: 10240
        hard: 10240

  xrd2:
    container_name: dev-xrd2-1
    image: "docker.io/${DOCKER_REPO:-rucio}/test-xrootd:${RUCIO_TAG:-latest}"
    platform: linux/amd64
    profiles:
      - storage
    environment:
      - XRDHOST=xrd2
      - XRDPORT=1095
    volumes:
      - ../../certs/rucio_ca.pem:/etc/grid-security/certificates/5fca1cb1.0:z
      - ../../certs/hostcert_xrd2.pem:/tmp/xrdcert.pem:Z
      - ../../certs/hostcert_xrd2.key.pem:/tmp/xrdkey.pem:Z
    ulimits:
      nofile:
        soft: 10240
        hard: 10240

  xrd3:
    container_name: dev-xrd3-1
    image: "docker.io/${DOCKER_REPO:-rucio}/test-xrootd:${RUCIO_TAG:-latest}"
    platform: linux/amd64
    profiles:
      - storage
    environment:
      - XRDHOST=xrd3
      - XRDPORT=1096
    volumes:
      - ../../certs/rucio_ca.pem:/etc/grid-security/certificates/5fca1cb1.0:z
      - ../../certs/hostcert_xrd3.pem:/tmp/xrdcert.pem:Z
      - ../../certs/hostcert_xrd3.key.pem:/tmp/xrdkey.pem:Z
    ulimits:
      nofile:
        soft: 10240
        hard: 10240

  xrd4:
    container_name: dev-xrd4-1
    image: "docker.io/${DOCKER_REPO:-rucio}/test-xrootd:${RUCIO_TAG:-latest}"
    platform: linux/amd64
    profiles:
      - storage
    environment:
      - XRDHOST=xrd4
      - XRDPORT=1097
    volumes:
      - ../../certs/rucio_ca.pem:/etc/grid-security/certificates/5fca1cb1.0:z
      - ../../certs/hostcert_xrd4.pem:/tmp/xrdcert.pem:Z
      - ../../certs/hostcert_xrd4.key.pem:/tmp/xrdkey.pem:Z
    ulimits:
      nofile:
        soft: 10240
        hard: 10240

  xrd5:
    container_name: dev-xrd5-1
    image: "docker.io/${DOCKER_REPO:-rucio}/test-xrootd:${RUCIO_TAG:-latest}"
    platform: linux/amd64
    profiles:
      - storage
    environment:
      - XRDHOST=xrd5
      - XRDPORT=1098
      - QBITTORRENT_UI_USERNAME=rucio
      - QBITTORRENT_UI_PASSWORD=rucio90df
      - QBITTORRENT_UI_PORT=8098
      - QBITTORRENT_LISTEN_PORT=10000
    volumes:
      - ./xrd/entrypoint.sh:/docker-entrypoint.sh:ro
      - ./xrd:/configs:ro
      - ./configure_qbittorrent.py:/configure_qbittorrent.py:ro
      - ../../certs/rucio_ca.pem:/etc/grid-security/certificates/5fca1cb1.0:z
      - ../../certs/hostcert_xrd5.pem:/tmp/xrdcert.pem:Z
      - ../../certs/hostcert_xrd5.key.pem:/tmp/xrdkey.pem:Z
    ulimits:
      nofile:
        soft: 10240
        hard: 10240

  web1:
    container_name: dev-web1-1
    image: "docker.io/${DOCKER_REPO:-rucio}/test-webdav:latest"
    platform: linux/amd64
    environment:
      - QBITTORRENT_UI_USERNAME=rucio
      - QBITTORRENT_UI_PASSWORD=rucio90df
      - QBITTORRENT_UI_PORT=8099
      - QBITTORRENT_LISTEN_PORT=10000
    volumes:
      - ./web1/entrypoint.sh:/usr/local/bin/docker-entrypoint.sh:ro
      - ./configure_qbittorrent.py:/configure_qbittorrent.py:ro
      - ../../certs/rucio_ca.pem:/etc/grid-security/certificates/5fca1cb1.0:ro
      - ../../certs/hostcert_web1.key.pem:/etc/grid-security/hostkey.pem:ro
      - ../../certs/hostcert_web1.pem:/etc/grid-security/hostcert.pem:Z
      - ./web1/default-ssl.conf:/etc/apache2/sites-available/default-ssl.conf

  # ------------------------------------------------------------------
  # Other services
  # ------------------------------------------------------------------
  minio:
    container_name: dev-minio-1
    image: docker.io/minio/minio
    profiles:
      - storage
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
    volumes:
      - vol-minio-data:/data
      - ../../certs/hostcert_minio.pem:/root/.minio/certs/public.crt:Z
      - ../../certs/hostcert_minio.key.pem:/root/.minio/certs/private.key:Z
    command: ["server", "/data"]

  ssh1:
    container_name: dev-ssh1-1
    image: "docker.io/${DOCKER_REPO:-rucio}/test-ssh:${RUCIO_TAG:-latest}"
    platform: linux/amd64
    profiles:
      - storage
    volumes:
      - ../../certs/ssh/ruciouser_sshkey.pub:/tmp/sshkey.pub:Z

  # ------------------------------------------------------------------
  # External metadata services
  # ------------------------------------------------------------------
  mongo:
    container_name: dev-mongo-1
    image: docker.io/mongo:5.0
    profiles:
      - externalmetadata
    environment:
      MONGO_INITDB_ROOT_USERNAME: rucio
      MONGO_INITDB_ROOT_PASSWORD: mongo-meta
    volumes:
      - vol-mongo-configdb:/data/configdb
      - vol-mongo-db:/data/db

  mongo-noauth:
    container_name: dev-mongo-noauth-1
    image: docker.io/mongo:5.0
    profiles:
      - externalmetadata
    volumes:
      - vol-mongo-noauth-configdb:/data/configdb
      - vol-mongo-noauth-db:/data/db

  postgres:
    container_name: dev-postgres-1
    image: docker.io/postgres:14
    profiles:
      - externalmetadata
    environment:
      - POSTGRES_USER=rucio
      - POSTGRES_DB=metadata
      - POSTGRES_PASSWORD=secret
    command: ["-p", "5433"]
    volumes:
      - vol-postgres-data:/var/lib/postgresql/data

  elasticsearch_meta:
    container_name: dev-elasticsearch_meta-1
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    platform: linux/amd64
    profiles:
      - externalmetadata
    environment:
      - ELASTIC_PASSWORD=rucio
      - discovery.type=single-node
      - xpack.security.transport.ssl.enabled=false
      - xpack.ml.enabled=false
      - xpack.security.audit.enabled=false
      - xpack.monitoring.collection.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false

  # ------------------------------------------------------------------
  # Monitoring stack
  # ------------------------------------------------------------------
  logstash:
    container_name: dev-logstash-1
    image: docker.elastic.co/logstash/logstash-oss:7.3.2
    platform: linux/amd64
    profiles:
      - monitoring
    command: bash -c "logstash-plugin install logstash-input-stomp ; /usr/local/bin/docker-entrypoint"
    volumes:
      - ./pipeline.conf:/usr/share/logstash/pipeline/pipeline.conf:Z

  kibana:
    container_name: dev-kibana-1
    image: docker.io/kibana:7.4.0
    profiles:
      - monitoring

  grafana:
    container_name: dev-grafana-1
    image: docker.io/grafana/grafana:latest
    profiles:
      - monitoring

  # ------------------------------------------------------------------
  # IAM / Keycloak for auth
  # ------------------------------------------------------------------
  iam-db:
    container_name: dev-iam-db-1
    image: mariadb:10.11
    profiles:
      - iam
    healthcheck:
      test: mysql -u indigoiam -psecret indigoiam -e "select * from client_details where client_name='rucio'" | grep 'rucio' > /dev/null
      interval: 5s
      retries: 10
    environment:
      - TZ=Europe/Paris
      - MARIADB_ROOT_PASSWORD=supersecret
    volumes:
      - ./iam/dbs_and_users.sql:/docker-entrypoint-initdb.d/01_dbs_and_users.sql:ro
      - ./iam/keycloak_db.sql:/docker-entrypoint-initdb.d/02_keycloak.sql:ro
      - ./iam/indigoiam_db.sql:/docker-entrypoint-initdb.d/03_indigoiam.sql:ro
      - vol-iam-db-mysql:/var/lib/mysql

  indigoiam:
    container_name: dev-indigoiam-1
    image: nginx
    profiles:
      - iam
    dns_search: cern.ch
    environment:
      TZ: Europe/Paris
      NGINX_HOST: indigoiam
      NGINX_PORT: 443
    volumes:
      - ../../certs/rucio_ca.pem:/etc/grid-security/certificates/5fca1cb1.0:z
      - ../../certs/hostcert_indigoiam.pem:/etc/grid-security/hostcert.pem:z
      - ../../certs/hostcert_indigoiam.key.pem:/etc/grid-security/hostkey.pem:z
      - /dev/urandom:/dev/random
      - ./iam/indigoiam_nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - indigoiam-login-service

  indigoiam-login-service:
    container_name: dev-indigoiam-login-service-1
    image: indigoiam/iam-login-service:v1.8.2p2
    platform: linux/amd64
    profiles:
      - iam
    environment:
      - IAM_JAVA_OPTS=-Djava.security.egd=file:/dev/urandom -Dspring.profiles.active=prod,oidc,cern,registration,wlcg-scopes -agentlib:jdwp=transport=dt_socket,server=y,address=1044,suspend=n -Dlogging.file.name=/var/log/iam/iam.log
      - IAM_JWT_DEFAULT_PROFILE=wlcg
      - IAM_HOST=indigoiam
      - IAM_PORT=8090
      - IAM_BASE_URL=https://indigoiam/
      - IAM_ISSUER=https://indigoiam/
      - IAM_FORWARD_HEADERS_STRATEGY=native
      - IAM_KEY_STORE_LOCATION=file:/keystore.jwks
      - IAM_JWK_CACHE_LIFETIME=21600
      # - IAM_X509_TRUST_ANCHORS_DIR=/etc/grid-security/certificates
      # - IAM_X509_TRUST_ANCHORS_REFRESH=14400
      - IAM_TOMCAT_ACCESS_LOG_ENABLED=false
      - IAM_TOMCAT_ACCESS_LOG_DIRECTORY=/tmp
      - IAM_ACTUATOR_USER_USERNAME=user
      - IAM_ACTUATOR_USER_PASSWORD=secret
      - IAM_LOCAL_RESOURCES_ENABLE=true
      - IAM_LOCAL_RESOURCES_LOCATION=file:/indigo-iam/local-resources
      - IAM_ORGANISATION_NAME=rucio-dc
      - IAM_TOPBAR_TITLE="INDIGO IAM for rucio-dc"
      - IAM_DB_HOST=iam-db
      - IAM_DB_PORT=3306
      - IAM_DB_NAME=indigoiam
      - IAM_DB_USERNAME=indigoiam
      - IAM_DB_PASSWORD=secret
    volumes:
      - ./iam/indigoiam_keystore.jwks:/keystore.jwks:ro
    depends_on:
      iam-db:
        condition: service_healthy

  keycloak:
    container_name: dev-keycloak-1
    image: quay.io/keycloak/keycloak:23.0.1
    command: start-dev --features=token-exchange,admin-fine-grained-authz,dynamic-scopes --db mariadb --db-url-host iam-db --db-username keycloak --db-password secret --https-certificate-file=/cert.pem --https-certificate-key-file=/key.pem
    profiles:
      - iam
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=password
    volumes:
      - ../../certs/rucio_ca.pem:/etc/grid-security/certificates/5fca1cb1.0:z
      - ../../certs/hostcert_keycloak.pem:/cert.pem:z
      - ../../certs/hostcert_keycloak.key.pem:/key.pem:z
    depends_on:
      iam-db:
        condition: service_healthy

volumes:
  # ------------------------------------------------------------------
  # Named volumes for each container
  # ------------------------------------------------------------------
  vol-ruciodb-data:
  vol-graphite-conf:
  vol-graphite-storage:
  vol-graphite-functions:
  vol-statsd-config:
  vol-graphite-redis:
  vol-graphite-log:
  vol-graphite-logrotate:
  vol-graphite-nginx:
  vol-influxdb-etc:
  vol-influxdb-var:
  vol-ftsdb-mysql:
  vol-minio-data:
  vol-postgres14-data:
  vol-mongo-noauth-configdb:
  vol-mongo-noauth-db:
  vol-mongo-configdb:
  vol-mongo-db:
  vol-iam-db-mysql:
  vol-mysql8-mysql:
  vol-postgres-data:
