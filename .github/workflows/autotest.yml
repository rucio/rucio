name: Run all the autotests

on:
  - pull_request
  - push

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Update pip
        run: python3 -m pip install -U pip setuptools
      - name: Install python requirements for matrix_parser.py
        run: python3 -m pip install -U PyYAML
      - name: Identify Matrix
        id: matrix
        run: echo "::set-output name=matrix::$(./tools/test/matrix_parser.py < ./etc/docker/test/matrix.yml)"
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
  test:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cfg: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
      - name: Build images
        id: images
        shell: bash
        run: |
          docker login https://docker.pkg.github.com -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          i=0; until [ "$i" -ge 3 ]; do
            IMAGES=$(echo '${{ toJson(matrix.cfg) }}' | ./tools/test/build_images.py \
                --cache-repo docker.pkg.github.com/${{ github.repository }} ./etc/docker/test || echo "")
            if [[ -n $IMAGES ]]; then break;
            else
              i=$((i+1)); sleep 5;
              echo "::warning::Building images failed, retrying…"
            fi
          done
          docker logout https://docker.pkg.github.com
          if [[ -z $IMAGES ]]; then exit 1; fi
          echo "::set-output name=images::$IMAGES"
      - name: Run test with cfg
        run: 'echo ''{"matrix": ${{ toJson(matrix.cfg) }}, "images": ${{ steps.images.outputs.images }} }'' | ./tools/test/run_tests.py'
  release-patch-setup:
    if: 'github.event_name == ''pull_request'' && !startsWith(github.event.pull_request.base.ref, ''release'') && !startsWith(github.event.pull_request.head.ref, ''feature'')'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Update pip
        run: python3 -m pip install -U pip setuptools
      - name: Install python requirements for matrix_parser.py
        run: python3 -m pip install -U sh PyYAML
      - name: Grab latest release branch
        id: grabrelease
        run: echo "::set-output name=release_branch::$(echo "${{ github.event.repository.branches_url }}" | ./tools/github/workflow/grabrelease.py)"
      - name: Fetch pull request commit range
        id: prcommits
        run: echo "::set-output name=source_commits::$(echo "${{ github.event.pull_request.commits_url }}" | ./tools/github/workflow/prcommits.py)"
      - name: Test cherry-picking pull request changes
        run: |
          echo '{
            "source_remote_name": "${{ github.actor }}",
            "source_remote": "${{ github.event.pull_request.head.repo.full_name }}",
            "source_commits": "${{ steps.prcommits.outputs.source_commits }}",
            "target_remote": "${{ github.event.pull_request.base.repo.full_name }}",
            "target_branch": "${{ steps.grabrelease.outputs.release_branch }}"
          }' | ./tools/github/workflow/mergetest.py
      - name: Identify Matrix
        id: matrix
        run: echo "::set-output name=matrix::$(./tools/test/matrix_parser.py < ./etc/docker/test/matrix.yml)"
    outputs:
      release_branch: ${{ steps.grabrelease.outputs.release_branch }}
      source_commits: ${{ steps.prcommits.outputs.source_commits }}
      matrix: ${{ steps.matrix.outputs.matrix }}
  release-patch-test:
    needs: release-patch-setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cfg: ${{ fromJson(needs.release-patch-setup.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
      - name: Update pip
        run: python3 -m pip install -U pip setuptools
      - name: Install python requirements for mergetest.py
        run: python3 -m pip install -U sh
      - name: Cherry-pick pull request changes
        run: |
          echo '{
            "source_remote_name": "${{ github.actor }}",
            "source_remote": "${{ github.event.pull_request.head.repo.full_name }}",
            "source_commits": "${{ needs.release-patch-setup.outputs.source_commits }}",
            "target_remote": "${{ github.event.pull_request.base.repo.full_name }}",
            "target_branch": "${{ needs.release-patch-setup.outputs.release_branch }}"
          }' | ./tools/github/workflow/mergetest.py
      - name: Build images
        id: images
        shell: bash
        run: |
          docker login https://docker.pkg.github.com -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          i=0; until [ "$i" -ge 3 ]; do
            IMAGES=$(echo '${{ toJson(matrix.cfg) }}' | ./tools/test/build_images.py \
                --cache-repo docker.pkg.github.com/${{ github.repository }} ./etc/docker/test || echo "")
            if [[ -n $IMAGES ]]; then break;
            else
              i=$((i+1)); sleep 5;
              echo "::warning::Building images failed, retrying…"
            fi
          done
          docker logout https://docker.pkg.github.com
          if [[ -z $IMAGES ]]; then exit 1; fi
          echo "::set-output name=images::$IMAGES"
      - name: Run test with cfg
        run: 'echo ''{"matrix": ${{ toJson(matrix.cfg) }}, "images": ${{ steps.images.outputs.images }} }'' | ./tools/test/run_tests.py'
