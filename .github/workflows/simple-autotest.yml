name: Simple Autotest

on:
  pull_request:
  push:
  schedule:
    - cron: '0 3 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/rucio-test
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}},format=short
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: etc/docker/test/alma9.Dockerfile
          build-args: |
            PYTHON=3.9
          load: true
          push: false
          tags: rucio-test:latest
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Set image tag output
        id: set-tag
        run: |
          echo "tag=rucio-test:latest" >> $GITHUB_OUTPUT

  # test:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       python-version: ["3.9", "3.10"]
  #       test-suite: 
  #         # - name: "syntax"
  #         #   env:
  #         #     SYNTAX_REPORT: "1"
  #         #     RUN_HTTPD: "false"
  #         #   profile: ""
  #         # - name: "client_syntax"
  #         #   env:
  #         #     RUN_HTTPD: "false"
  #         #   profile: ""
  #         # - name: "sqlite"
  #         #   env:
  #         #     RDBMS: "sqlite"
  #         #   profile: ""
  #         - name: "client"
  #           env:
  #             RDBMS: "postgres14"
  #           profile: "postgres14"
  #         - name: "multi_vo"
  #           env:
  #             RDBMS: "postgres14"
  #             RUCIO_HOME: "/opt/rucio/etc/multi_vo/tst"
  #           profile: "postgres14"
  #       exclude:
  #         # Limit some test suites to specific Python versions to reduce matrix size
  #         - python-version: "3.9"
  #           test-suite:
  #             name: "client_syntax"
  #         - python-version: "3.10"
  #           test-suite:
  #             name: "syntax"

  #   steps:
  #     - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
          
  #     - name: Set test environment variables
  #       run: |
  #         echo "RUCIO_HOME=${{ matrix.test-suite.env.RUCIO_HOME || '/opt/rucio' }}" >> $GITHUB_ENV
  #         echo "RDBMS=${{ matrix.test-suite.env.RDBMS || 'sqlite' }}" >> $GITHUB_ENV
  #         echo "SYNTAX_REPORT=${{ matrix.test-suite.env.SYNTAX_REPORT || '0' }}" >> $GITHUB_ENV
  #         echo "RUN_HTTPD=${{ matrix.test-suite.env.RUN_HTTPD || 'true' }}" >> $GITHUB_ENV
  #         echo "COMPOSE_PROJECT=rucio-test-${{ matrix.test-suite.name }}-py$(echo '${{ matrix.python-version }}' | tr '.' '-')" >> $GITHUB_ENV
          
  #     - name: Create docker-compose override
  #       run: |
  #         cat > docker-compose.override.yml << 'EOF'
  #         services:
  #           rucio:
  #             image: ${{ needs.build.outputs.image-tag }}
  #             environment:
  #               - RUCIO_HOME=${RUCIO_HOME}
  #               - RDBMS=${RDBMS}
  #               - SYNTAX_REPORT=${SYNTAX_REPORT}
  #               - RUN_HTTPD=${RUN_HTTPD}
  #               - DIST=alma9
  #               - PYTHON=${{ matrix.python-version }}
  #               - SUITE=${{ matrix.test-suite.name }}
  #           ruciodb:
  #             profiles:
  #               - donotstart
  #         EOF
          
  #     - name: Start services with docker-compose (httpd tests)
  #       if: env.RUN_HTTPD == 'true'
  #       run: |
  #         PROFILE_ARG=""
  #         if [ -n "${{ matrix.test-suite.profile }}" ]; then
  #           PROFILE_ARG="--profile ${{ matrix.test-suite.profile }}"
  #         fi
          
  #         docker compose -p ${COMPOSE_PROJECT} \
  #           --file etc/docker/dev/docker-compose.yml \
  #           --file docker-compose.override.yml \
  #           ${PROFILE_ARG} \
  #           up -d
            
  #     - name: Wait for services to be ready
  #       if: env.RUN_HTTPD == 'true'
  #       run: |
  #         # Wait for rucio container to be ready
  #         timeout 60 bash -c 'until docker compose -p ${COMPOSE_PROJECT} ps rucio | grep -q "Up"; do sleep 2; done'
          
  #     - name: Run tests with docker-compose (httpd tests)
  #       if: env.RUN_HTTPD == 'true'
  #       run: |
  #         docker compose -p ${COMPOSE_PROJECT} exec rucio bash -c "
  #           case '${{ matrix.test-suite.name }}' in
  #             'client')
  #               python -m pytest -v tests/test_client*.py --tb=short
  #               ;;
  #             'multi_vo')
  #               python -m pytest -v tests/test_multi_vo*.py --tb=short
  #               ;;
  #             'sqlite')
  #               python -m pytest -v tests/ -k 'not test_syntax and not test_client_syntax' --tb=short -x
  #               ;;
  #             *)
  #               python -m pytest -v tests/ --tb=short
  #               ;;
  #           esac
  #         "
          
  #     - name: Run tests directly (non-httpd tests)
  #       if: env.RUN_HTTPD == 'false'
  #       run: |
  #         docker run --rm \
  #           -e RUCIO_HOME="${RUCIO_HOME}" \
  #           -e RDBMS="${RDBMS}" \
  #           -e SYNTAX_REPORT="${SYNTAX_REPORT}" \
  #           -e RUN_HTTPD="${RUN_HTTPD}" \
  #           -e DIST=alma9 \
  #           -e PYTHON="${{ matrix.python-version }}" \
  #           -e SUITE="${{ matrix.test-suite.name }}" \
  #           -v "${{ github.workspace }}/tools":/opt/rucio/tools \
  #           -v "${{ github.workspace }}/bin":/opt/rucio/bin \
  #           -v "${{ github.workspace }}/lib":/opt/rucio/lib \
  #           -v "${{ github.workspace }}/etc":/opt/rucio/etc \
  #           -v "${{ github.workspace }}/tests":/opt/rucio/tests \
  #           -v "${{ github.workspace }}/requirements":/opt/rucio/requirements \
  #           -v "${{ github.workspace }}/.pep8":/opt/rucio/.pep8 \
  #           -v "${{ github.workspace }}/.pycodestyle":/opt/rucio/.pycodestyle \
  #           -v "${{ github.workspace }}/pyproject.toml":/opt/rucio/pyproject.toml \
  #           -v "${{ github.workspace }}/setup.py":/opt/rucio/setup.py \
  #           -v "${{ github.workspace }}/setup_rucio.py":/opt/rucio/setup_rucio.py \
  #           -v "${{ github.workspace }}/setup_rucio_client.py":/opt/rucio/setup_rucio_client.py \
  #           -v "${{ github.workspace }}/setup_webui.py":/opt/rucio/setup_webui.py \
  #           -v "${{ github.workspace }}/setuputil.py":/opt/rucio/setuputil.py \
  #           -w /opt/rucio \
  #           ${{ needs.build.outputs.image-tag }} \
  #           bash -c "
  #             case '${{ matrix.test-suite.name }}' in
  #               'syntax')
  #                 echo 'Running syntax tests...'
  #                 // python -m pytest -v tests/test_syntax.py --tb=short
  #                 ;;
  #               'client_syntax')
  #                 echo 'Running client syntax tests...'
  #                 // python -m pytest -v tests/test_client_syntax.py --tb=short
  #                 ;;
  #               *)
  #                 echo 'Running unit tests...'
  #                 // python -m pytest -v tests/ --tb=short
  #                 ;;
  #             esac
  #           "
            
  #     - name: Cleanup docker-compose services
  #       if: always() && env.RUN_HTTPD == 'true'
  #       run: |
  #         docker compose -p ${COMPOSE_PROJECT} down -t 30 || true