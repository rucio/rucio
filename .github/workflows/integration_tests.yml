name: End to End integration tests

on:
  - pull_request
  - push

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Update pip
        run: python3 -m pip install -U pip setuptools
      - name: Install python requirements for matrix_parser.py
        run: python3 -m pip install -U PyYAML
      - name: Identify branch
        id: branch
        run: python3 -c 'from os import environ as env; print("::set-output name=branch::" + (env.get("GITHUB_BASE_REF", None) if env.get("GITHUB_BASE_REF", None) else env.get("GITHUB_REF", "master")))'
      - name: Identify Matrix
        id: matrix
        run: echo "::set-output name=matrix::$(./tools/test/matrix_parser.py < ./etc/docker/test/matrix_integration_tests.yml)"
    outputs:
      branch: ${{ steps.branch.outputs.branch }}
      matrix: ${{ steps.matrix.outputs.matrix }}

  integration-tests:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cfg: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - name: Checkout rucio containers repository
        uses: actions/checkout@v2
        with:
          repository: rucio/containers
      - uses: actions/checkout@v2
        name: Checkout rucio source
        with:
          path: dev/rucio
      - name: Use rucio/containers Dockerfile for integration tests
        shell: bash
        run: |
          sed -i 's;RUN git clone .*;COPY ./rucio /tmp/rucio;' $GITHUB_WORKSPACE/dev/Dockerfile
      - name: Build rucio-dev images
        id: images
        shell: bash
        run: |
          docker login https://ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker-compose -f $GITHUB_WORKSPACE/dev/rucio/etc/docker/dev/docker-compose-storage.yml pull
          i=0; until [ "$i" -ge 3 ]; do
            IMAGES=$(echo '${{ toJson(matrix.cfg) }}' | $GITHUB_WORKSPACE/dev/rucio/tools/test/build_images.py --output list \
                --cache-repo ghcr.io/${{ github.repository }} --branch "${{ needs.setup.outputs.branch }}" \
                $GITHUB_WORKSPACE/dev || echo "")
            if [[ -n $IMAGES ]]; then break;
            else
              i=$((i+1)); sleep 5;
              echo "::warning::Building images failed, retryingâ€¦"
            fi
          done
          docker logout https://ghcr.io
          if [[ -z "$IMAGES" ]]; then echo "::error::Building images failed ultimately"; exit 1; fi
          echo "::set-output name=images::$IMAGES"
      - name: Prepare Docker Compose
        shell: bash
        run: |
          docker image ls
          sed -i 's;image: docker.io/rucio/rucio-dev.*;image: ${{ fromJSON(steps.images.outputs.images)[0] }};' \
              $GITHUB_WORKSPACE/dev/rucio/etc/docker/dev/docker-compose-storage.yml
      - name: Start containers
        run: docker-compose -f $GITHUB_WORKSPACE/dev/rucio/etc/docker/dev/docker-compose-storage.yml up -d
      - name: Initialize tests
        shell: bash
        run: |
          docker exec -t dev_rucio_1 cp etc/rse-accounts.cfg.template etc/rse-accounts.cfg
          docker exec -t dev_rucio_1 tools/run_tests_docker.sh -ir
      - name: File Upload/Download Test
        run: docker exec -t dev_rucio_1 tools/pytest.sh -v --tb=short test_rucio_server.py
      - name: UploadClient Test
        run: docker exec -t dev_rucio_1 tools/pytest.sh -v --tb=short test_upload.py
      - name: Test Protocol XrootD
        run: docker exec -t dev_rucio_1 tools/pytest.sh -v --tb=short test_rse_protocol_xrootd.py
      - name: Test Conveyor
        run: docker exec -t dev_rucio_1 tools/pytest.sh -v --tb=short test_conveyor.py::test_multihop_intermediate_replica_lifecycle
      - name: Execute transfer and export FTS transfer details
        id: tpc
        shell: bash
        run: |
          docker exec -t dev_rucio_1 tools/pytest.sh -v --tb=short --export-artifacts-from="test_tpc" test_tpc.py
          FTS_LOG_FILE=$(docker exec -t dev_rucio_1 cat /tmp/test_tpc.artifact)
          echo "::set-output name=fts3log::$FTS_LOG_FILE"
      - name: Verify TPC transfers from FTS logs
        shell: bash
        run: |
          FTS_LOG_FILE=${{ steps.tpc.outputs.fts3log }}
          if docker exec -t dev_fts_1 /bin/bash -c "grep -Fq \"3rd pull\" $FTS_LOG_FILE"
          then
            echo "TPC 3rd party pull verified"
          else
            echo "TPC failed"
            exit 1
          fi
      - name: Archive Upload/Download Test
        run: docker exec -t dev_rucio_1 tools/pytest.sh -v --tb=short test_download.py::test_download_from_archive_on_xrd
      - name: Stop containers
        run: docker-compose -f $GITHUB_WORKSPACE/dev/rucio/etc/docker/dev/docker-compose-storage.yml down
